# [[[NOTE : THIS EXAMPLE IS OUTDATED AND NEEDS TO BE UPDATED. It still works though.]]]

# Hi there! If you wanted to play this small plot, use the .jar that comes with this file!

# If you're here to see what a story file looks like, welcome! Have a look around~

# First we have a node : it begins with a node ID (that is also displayed inside the player) and a colon. After that comes the text you see on your screen. 

1:[[[NOTE : THIS EXAMPLE IS OUTDATED AND NEEDS TO BE UPDATED. It still works though.]]]

Welcome to this very simple story. I am the narrator. I am her to narrate stuff

This is a test of the TreeStory stuff. It allows to make stories that can go anyway you want. It also includes a (very) small scripting thingy, so you do not have to touch any kind of code to make a cool, interactive story!

All of this is made in pure java, but it can be very easy to implement an alternative player.

If you see a node counter going like mad : don't worry. Every part of the story is considered to be a "node" and this is just reference in case something goes wrong.

So, you're here for some kind of story right?... Well, let's get started.

You are inside your house, wondering what you could do all day.

# After the text comes the different options. Their syntax is simple.
# :Text of the option|id of the next node if this option is chosen
#
:Oh hey, a computer!|20


# Here we just repead node #1 to make sure we don't get the introduction wall of text again when going back here
10:You are still in your house, still wondering what you could do all day.
:Oh hey, a computer!|20



# You can put IDs however you want, but I do recommend following a pattern you'll define yourself, the one I use here is extremely messy


# Here we have multiple options. There are no limitations to the number of options for a node.

20:You look at the computer : it's off.
:Let's go turn it on|21
:Nevermind|10

# Do note that BTS files are easy to follow, even without a player.

21:The computer is now turned on. After a while, a menu shows up. Which OS will you choose?
:Windows 10|211
:Ubuntu|212
:Arch Linux|213

# Small trolling here for Windows 10 fans. Here is a funny thing : in my high school, one class has the ability to take notes on their laptop. But one day a Windows 10 update made them unable to login. And thus a class got in trouble. Because Windows...
211:After a few seconds, you see that Windows is updating something...
:Okay, I'll wait|2111
:Urgh, I hate Windows. *turn off the computer*|20

# #WindowsUpdatesForever
2111:After three long hours, you realise that Windows has trashed your hard drive, and you cannot boot anymore. It does not matter if you're going to go to a shop to get it fixed or repair it yourself, the rest of your day is ruined...

GAME OVER

# Do note that the above node does not have any option : such a node is called a Final Node, which means it is one of the endings of the story!

# Time to get to the part where I trashtalk Ubuntu! AND OMG LOOK AT THAT FIRST OPTION WTF IS THAT
212:After mere seconds, you see a familiar looking lockscreen. Time to put that password in! Except... wait, what is the password again?
:Huh... *type something random*|2122,2121[equ:tries,4]|{incr:tries}
:Crap, I forgot... *turn off the computer*|20|{set:tries,0}

# Let's break that thing down for you :)
# The actual, complex syntax of an option is :
# :message|1,2[checker]|{action}[checker]
# You can replace the "1,2[checker]" part with just a number. The model used here is called conditional node jumping. The checker is a simple condition : if the condition returns TRUE, we go to the first node. If it returns FALSE, we go to the second one. Simple as that.
# The last part is completely optional. It defines actions and a checker (the order does not matter, and you can have any number of actions, from none to infinite). A checker is a condition that determines whether or not the option should be able : if the checker returns TRUE, the option will be available, if it returns FALSE it will not be available.
# Finally, {action} is a simple action that is executed when the option is selected : here it is simply used for incrementing a value. They are executed in the order they are written.

# SO, here, if the variable TRIES is exactly 4, we jump to node 2122, if it is not 4, we jump to node 2121. When this is clicked, we increase the TRIES value by one. And that's it!

# Wrong password 4 times = jump to this node. We also reset the tries value because the computer is shut down ; we also do that for the second option of node 212
2122:Your computer emits a loud BEEP and turns off. Looks as if putting random passwords does not work that well...
:Urgh...|20|{set:tries,0}

2121:A red text appears. Wrong password...
:Let's try again|212

#Yeah... I don't like Arch Linux. And it trashed a friend's computer while we were on holidays, he had a """fun""" time recovering everything...
213:The computer does not boot and immediately shuts down. It looks as if that last update broke Arch Linux. Again.
:Urgh...|20